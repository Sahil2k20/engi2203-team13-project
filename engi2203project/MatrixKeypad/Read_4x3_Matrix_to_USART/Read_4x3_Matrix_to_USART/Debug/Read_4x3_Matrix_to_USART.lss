
Read_4x3_Matrix_to_USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000796  0000082a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000796  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080012c  0080012c  00000856  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000856  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b46  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000920  00000000  00000000  000014ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000544  00000000  00000000  00001dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00002330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000517  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000192  00000000  00000000  0000292f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002ac1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e9       	ldi	r30, 0x96	; 150
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 33       	cpi	r26, 0x33	; 51
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  9e:	0c 94 c9 03 	jmp	0x792	; 0x792 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initHardware>:
					  {'7', '8', '9'},
					  {'*', '0', '#'}};

void initHardware(void)
{
	ROWPORT &= ~(1<<ROW1) & ~(1<<ROW2) & ~(1<<ROW3) & ~(1<<ROW4); //Set Row Ports low
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	80 7f       	andi	r24, 0xF0	; 240
  aa:	85 b9       	out	0x05, r24	; 5
	COLPORT |= (1<<COL1) | (1<<COL2) | (1<<COL3); //Sets Column Ports high
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	80 6e       	ori	r24, 0xE0	; 224
  b0:	8b b9       	out	0x0b, r24	; 11
  b2:	08 95       	ret

000000b4 <setRowLow>:
}

void setRowLow(int row)
{
  b4:	9c 01       	movw	r18, r24
	ROWDDR &=  ~(1<<ROW1) & ~(1<<ROW2) & ~(1<<ROW3) & ~(1<<ROW4); // Sets all Rows to Input
  b6:	94 b1       	in	r25, 0x04	; 4
  b8:	90 7f       	andi	r25, 0xF0	; 240
  ba:	94 b9       	out	0x04, r25	; 4
		
	if(row == 0)
  bc:	21 15       	cp	r18, r1
  be:	31 05       	cpc	r19, r1
  c0:	11 f4       	brne	.+4      	; 0xc6 <setRowLow+0x12>
	{
		ROWDDR |= (1<<ROW1); // Sets Row 1 to Output
  c2:	23 9a       	sbi	0x04, 3	; 4
  c4:	08 95       	ret
	}else if(row == 1)
  c6:	21 30       	cpi	r18, 0x01	; 1
  c8:	31 05       	cpc	r19, r1
  ca:	11 f4       	brne	.+4      	; 0xd0 <setRowLow+0x1c>
	{
		ROWDDR |= (1<<ROW2); // Sets Row 2 to Output
  cc:	22 9a       	sbi	0x04, 2	; 4
  ce:	08 95       	ret
	}else if(row == 2)
  d0:	22 30       	cpi	r18, 0x02	; 2
  d2:	31 05       	cpc	r19, r1
  d4:	11 f4       	brne	.+4      	; 0xda <setRowLow+0x26>
	{
		ROWDDR |= (1<<ROW3); // Sets Row 3 to Output
  d6:	21 9a       	sbi	0x04, 1	; 4
  d8:	08 95       	ret
	}else
	{
		ROWDDR |= (1<<ROW4); // Sets Row 4 to Output
  da:	20 9a       	sbi	0x04, 0	; 4
  dc:	08 95       	ret

000000de <colPushed>:
	}
}

int colPushed(void)
{
	if((COLPIN & (1<<COL1)) == 0) //Checks if Column 1 is low
  de:	4f 9b       	sbis	0x09, 7	; 9
  e0:	07 c0       	rjmp	.+14     	; 0xf0 <colPushed+0x12>
	{
		return 1;
	}
	else if((COLPIN & (1<<COL2)) == 0) //Checks if Column 2 is low
  e2:	4e 9b       	sbis	0x09, 6	; 9
  e4:	08 c0       	rjmp	.+16     	; 0xf6 <colPushed+0x18>
	{
		return 2;
	}
	else if((COLPIN & (1<<COL3)) == 0) //Checks if Column 3 is low
  e6:	4d 9b       	sbis	0x09, 5	; 9
  e8:	09 c0       	rjmp	.+18     	; 0xfc <colPushed+0x1e>
	{
		return 3;
	}
	
	
	return 0; //returns nothing if no col detected
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	08 95       	ret

int colPushed(void)
{
	if((COLPIN & (1<<COL1)) == 0) //Checks if Column 1 is low
	{
		return 1;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	08 95       	ret
	}
	else if((COLPIN & (1<<COL2)) == 0) //Checks if Column 2 is low
	{
		return 2;
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	08 95       	ret
	}
	else if((COLPIN & (1<<COL3)) == 0) //Checks if Column 3 is low
	{
		return 3;
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	
	return 0; //returns nothing if no col detected
}
 100:	08 95       	ret

00000102 <getKeypress>:

char getKeypress(void)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
	for(int row = 0; row < 4; row++){
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	d0 e0       	ldi	r29, 0x00	; 0
		setRowLow(row);
 10a:	ce 01       	movw	r24, r28
 10c:	0e 94 5a 00 	call	0xb4	; 0xb4 <setRowLow>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	87 e8       	ldi	r24, 0x87	; 135
 112:	93 e1       	ldi	r25, 0x13	; 19
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <getKeypress+0x12>
 118:	00 c0       	rjmp	.+0      	; 0x11a <getKeypress+0x18>
 11a:	00 00       	nop
		_delay_ms(20);
		
		int col = colPushed();
 11c:	0e 94 6f 00 	call	0xde	; 0xde <colPushed>
		
		if(col){
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	59 f0       	breq	.+22     	; 0x13a <getKeypress+0x38>
			return buttons[row][col-1];
 124:	9e 01       	movw	r18, r28
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
 12a:	c2 0f       	add	r28, r18
 12c:	d3 1f       	adc	r29, r19
 12e:	c8 0f       	add	r28, r24
 130:	d9 1f       	adc	r29, r25
 132:	c1 50       	subi	r28, 0x01	; 1
 134:	df 4f       	sbci	r29, 0xFF	; 255
 136:	88 81       	ld	r24, Y
 138:	04 c0       	rjmp	.+8      	; 0x142 <getKeypress+0x40>
	return 0; //returns nothing if no col detected
}

char getKeypress(void)
{
	for(int row = 0; row < 4; row++){
 13a:	21 96       	adiw	r28, 0x01	; 1
 13c:	c4 30       	cpi	r28, 0x04	; 4
 13e:	d1 05       	cpc	r29, r1
 140:	21 f7       	brne	.-56     	; 0x10a <getKeypress+0x8>
		
		if(col){
			return buttons[row][col-1];
		}
	}
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <getNewKeypress>:

char getNewKeypress(void)
{
	static char last_button;
	char b = getKeypress();
 148:	0e 94 81 00 	call	0x102	; 0x102 <getKeypress>
	
	//Check if we held button down
	if(b == last_button) return 0;
 14c:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <__data_end>
 150:	89 17       	cp	r24, r25
 152:	19 f0       	breq	.+6      	; 0x15a <getNewKeypress+0x12>
	
	last_button = b;
 154:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
	
	return b;
 158:	08 95       	ret
{
	static char last_button;
	char b = getKeypress();
	
	//Check if we held button down
	if(b == last_button) return 0;
 15a:	80 e0       	ldi	r24, 0x00	; 0
	
	last_button = b;
	
	return b;
}
 15c:	08 95       	ret

0000015e <main>:
#include <util/delay.h>
#include "4x3_Matrix.h"

int main(void)
{
	initHardware();
 15e:	0e 94 53 00 	call	0xa6	; 0xa6 <initHardware>
	init_uart();
 162:	0e 94 d7 00 	call	0x1ae	; 0x1ae <init_uart>

	while (1)
	{
		keypress = getNewKeypress();
		
		if(keypress)printf("%c\n", keypress);
 166:	c8 e2       	ldi	r28, 0x28	; 40
 168:	d1 e0       	ldi	r29, 0x01	; 1
   
	char keypress;

	while (1)
	{
		keypress = getNewKeypress();
 16a:	0e 94 a4 00 	call	0x148	; 0x148 <getNewKeypress>
		
		if(keypress)printf("%c\n", keypress);
 16e:	88 23       	and	r24, r24
 170:	e1 f3       	breq	.-8      	; 0x16a <main+0xc>
 172:	1f 92       	push	r1
 174:	8f 93       	push	r24
 176:	df 93       	push	r29
 178:	cf 93       	push	r28
 17a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <printf>
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	f1 cf       	rjmp	.-30     	; 0x16a <main+0xc>

00000188 <uart_putchar>:
FILE mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
/******************************************************************************
******************************************************************************/
int uart_putchar(char c, FILE *stream)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
 188:	e0 ec       	ldi	r30, 0xC0	; 192
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	90 81       	ld	r25, Z
 18e:	95 ff       	sbrs	r25, 5
 190:	fd cf       	rjmp	.-6      	; 0x18c <uart_putchar+0x4>
	UDR0 = c;
 192:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	return 0;
}
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	08 95       	ret

0000019c <uart_getchar>:
/******************************************************************************
******************************************************************************/
int uart_getchar(FILE *stream)
{
	/* Wait until data exists. */
	loop_until_bit_is_set(UCSR0A, RXC0);
 19c:	e0 ec       	ldi	r30, 0xC0	; 192
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	88 23       	and	r24, r24
 1a4:	ec f7       	brge	.-6      	; 0x1a0 <uart_getchar+0x4>
	return UDR0;
 1a6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	08 95       	ret

000001ae <init_uart>:
/******************************************************************************
******************************************************************************/
void init_uart(void)
{
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 1ae:	88 e1       	ldi	r24, 0x18	; 24
 1b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UBRR0 = 103;  //With 16 MHz Crystal, 9600 baud = 103
 1b4:	87 e6       	ldi	r24, 0x67	; 103
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 1bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	stdout = &mystdout;
 1c0:	ed e2       	ldi	r30, 0x2D	; 45
 1c2:	f1 e0       	ldi	r31, 0x01	; 1
 1c4:	8a e1       	ldi	r24, 0x1A	; 26
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	93 83       	std	Z+3, r25	; 0x03
 1ca:	82 83       	std	Z+2, r24	; 0x02
	stdin = &mystdin;
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	91 83       	std	Z+1, r25	; 0x01
 1d2:	80 83       	st	Z, r24
 1d4:	08 95       	ret

000001d6 <printf>:
 1d6:	a0 e0       	ldi	r26, 0x00	; 0
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	e1 ef       	ldi	r30, 0xF1	; 241
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	0c 94 a2 03 	jmp	0x744	; 0x744 <__prologue_saves__+0x20>
 1e2:	ae 01       	movw	r20, r28
 1e4:	4b 5f       	subi	r20, 0xFB	; 251
 1e6:	5f 4f       	sbci	r21, 0xFF	; 255
 1e8:	fa 01       	movw	r30, r20
 1ea:	61 91       	ld	r22, Z+
 1ec:	71 91       	ld	r23, Z+
 1ee:	af 01       	movw	r20, r30
 1f0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <__iob+0x2>
 1f4:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <__iob+0x3>
 1f8:	0e 94 01 01 	call	0x202	; 0x202 <vfprintf>
 1fc:	e2 e0       	ldi	r30, 0x02	; 2
 1fe:	0c 94 be 03 	jmp	0x77c	; 0x77c <__epilogue_restores__+0x20>

00000202 <vfprintf>:
 202:	ab e0       	ldi	r26, 0x0B	; 11
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	e7 e0       	ldi	r30, 0x07	; 7
 208:	f1 e0       	ldi	r31, 0x01	; 1
 20a:	0c 94 92 03 	jmp	0x724	; 0x724 <__prologue_saves__>
 20e:	6c 01       	movw	r12, r24
 210:	7b 01       	movw	r14, r22
 212:	8a 01       	movw	r16, r20
 214:	fc 01       	movw	r30, r24
 216:	17 82       	std	Z+7, r1	; 0x07
 218:	16 82       	std	Z+6, r1	; 0x06
 21a:	83 81       	ldd	r24, Z+3	; 0x03
 21c:	81 ff       	sbrs	r24, 1
 21e:	cc c1       	rjmp	.+920    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 220:	ce 01       	movw	r24, r28
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	3c 01       	movw	r6, r24
 226:	f6 01       	movw	r30, r12
 228:	93 81       	ldd	r25, Z+3	; 0x03
 22a:	f7 01       	movw	r30, r14
 22c:	93 fd       	sbrc	r25, 3
 22e:	85 91       	lpm	r24, Z+
 230:	93 ff       	sbrs	r25, 3
 232:	81 91       	ld	r24, Z+
 234:	7f 01       	movw	r14, r30
 236:	88 23       	and	r24, r24
 238:	09 f4       	brne	.+2      	; 0x23c <vfprintf+0x3a>
 23a:	ba c1       	rjmp	.+884    	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 23c:	85 32       	cpi	r24, 0x25	; 37
 23e:	39 f4       	brne	.+14     	; 0x24e <vfprintf+0x4c>
 240:	93 fd       	sbrc	r25, 3
 242:	85 91       	lpm	r24, Z+
 244:	93 ff       	sbrs	r25, 3
 246:	81 91       	ld	r24, Z+
 248:	7f 01       	movw	r14, r30
 24a:	85 32       	cpi	r24, 0x25	; 37
 24c:	29 f4       	brne	.+10     	; 0x258 <vfprintf+0x56>
 24e:	b6 01       	movw	r22, r12
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <fputc>
 256:	e7 cf       	rjmp	.-50     	; 0x226 <vfprintf+0x24>
 258:	91 2c       	mov	r9, r1
 25a:	21 2c       	mov	r2, r1
 25c:	31 2c       	mov	r3, r1
 25e:	ff e1       	ldi	r31, 0x1F	; 31
 260:	f3 15       	cp	r31, r3
 262:	d8 f0       	brcs	.+54     	; 0x29a <vfprintf+0x98>
 264:	8b 32       	cpi	r24, 0x2B	; 43
 266:	79 f0       	breq	.+30     	; 0x286 <vfprintf+0x84>
 268:	38 f4       	brcc	.+14     	; 0x278 <vfprintf+0x76>
 26a:	80 32       	cpi	r24, 0x20	; 32
 26c:	79 f0       	breq	.+30     	; 0x28c <vfprintf+0x8a>
 26e:	83 32       	cpi	r24, 0x23	; 35
 270:	a1 f4       	brne	.+40     	; 0x29a <vfprintf+0x98>
 272:	23 2d       	mov	r18, r3
 274:	20 61       	ori	r18, 0x10	; 16
 276:	1d c0       	rjmp	.+58     	; 0x2b2 <vfprintf+0xb0>
 278:	8d 32       	cpi	r24, 0x2D	; 45
 27a:	61 f0       	breq	.+24     	; 0x294 <vfprintf+0x92>
 27c:	80 33       	cpi	r24, 0x30	; 48
 27e:	69 f4       	brne	.+26     	; 0x29a <vfprintf+0x98>
 280:	23 2d       	mov	r18, r3
 282:	21 60       	ori	r18, 0x01	; 1
 284:	16 c0       	rjmp	.+44     	; 0x2b2 <vfprintf+0xb0>
 286:	83 2d       	mov	r24, r3
 288:	82 60       	ori	r24, 0x02	; 2
 28a:	38 2e       	mov	r3, r24
 28c:	e3 2d       	mov	r30, r3
 28e:	e4 60       	ori	r30, 0x04	; 4
 290:	3e 2e       	mov	r3, r30
 292:	2a c0       	rjmp	.+84     	; 0x2e8 <vfprintf+0xe6>
 294:	f3 2d       	mov	r31, r3
 296:	f8 60       	ori	r31, 0x08	; 8
 298:	1d c0       	rjmp	.+58     	; 0x2d4 <vfprintf+0xd2>
 29a:	37 fc       	sbrc	r3, 7
 29c:	2d c0       	rjmp	.+90     	; 0x2f8 <vfprintf+0xf6>
 29e:	20 ed       	ldi	r18, 0xD0	; 208
 2a0:	28 0f       	add	r18, r24
 2a2:	2a 30       	cpi	r18, 0x0A	; 10
 2a4:	40 f0       	brcs	.+16     	; 0x2b6 <vfprintf+0xb4>
 2a6:	8e 32       	cpi	r24, 0x2E	; 46
 2a8:	b9 f4       	brne	.+46     	; 0x2d8 <vfprintf+0xd6>
 2aa:	36 fc       	sbrc	r3, 6
 2ac:	81 c1       	rjmp	.+770    	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 2ae:	23 2d       	mov	r18, r3
 2b0:	20 64       	ori	r18, 0x40	; 64
 2b2:	32 2e       	mov	r3, r18
 2b4:	19 c0       	rjmp	.+50     	; 0x2e8 <vfprintf+0xe6>
 2b6:	36 fe       	sbrs	r3, 6
 2b8:	06 c0       	rjmp	.+12     	; 0x2c6 <vfprintf+0xc4>
 2ba:	8a e0       	ldi	r24, 0x0A	; 10
 2bc:	98 9e       	mul	r9, r24
 2be:	20 0d       	add	r18, r0
 2c0:	11 24       	eor	r1, r1
 2c2:	92 2e       	mov	r9, r18
 2c4:	11 c0       	rjmp	.+34     	; 0x2e8 <vfprintf+0xe6>
 2c6:	ea e0       	ldi	r30, 0x0A	; 10
 2c8:	2e 9e       	mul	r2, r30
 2ca:	20 0d       	add	r18, r0
 2cc:	11 24       	eor	r1, r1
 2ce:	22 2e       	mov	r2, r18
 2d0:	f3 2d       	mov	r31, r3
 2d2:	f0 62       	ori	r31, 0x20	; 32
 2d4:	3f 2e       	mov	r3, r31
 2d6:	08 c0       	rjmp	.+16     	; 0x2e8 <vfprintf+0xe6>
 2d8:	8c 36       	cpi	r24, 0x6C	; 108
 2da:	21 f4       	brne	.+8      	; 0x2e4 <vfprintf+0xe2>
 2dc:	83 2d       	mov	r24, r3
 2de:	80 68       	ori	r24, 0x80	; 128
 2e0:	38 2e       	mov	r3, r24
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <vfprintf+0xe6>
 2e4:	88 36       	cpi	r24, 0x68	; 104
 2e6:	41 f4       	brne	.+16     	; 0x2f8 <vfprintf+0xf6>
 2e8:	f7 01       	movw	r30, r14
 2ea:	93 fd       	sbrc	r25, 3
 2ec:	85 91       	lpm	r24, Z+
 2ee:	93 ff       	sbrs	r25, 3
 2f0:	81 91       	ld	r24, Z+
 2f2:	7f 01       	movw	r14, r30
 2f4:	81 11       	cpse	r24, r1
 2f6:	b3 cf       	rjmp	.-154    	; 0x25e <vfprintf+0x5c>
 2f8:	98 2f       	mov	r25, r24
 2fa:	9f 7d       	andi	r25, 0xDF	; 223
 2fc:	95 54       	subi	r25, 0x45	; 69
 2fe:	93 30       	cpi	r25, 0x03	; 3
 300:	28 f4       	brcc	.+10     	; 0x30c <vfprintf+0x10a>
 302:	0c 5f       	subi	r16, 0xFC	; 252
 304:	1f 4f       	sbci	r17, 0xFF	; 255
 306:	9f e3       	ldi	r25, 0x3F	; 63
 308:	99 83       	std	Y+1, r25	; 0x01
 30a:	0d c0       	rjmp	.+26     	; 0x326 <vfprintf+0x124>
 30c:	83 36       	cpi	r24, 0x63	; 99
 30e:	31 f0       	breq	.+12     	; 0x31c <vfprintf+0x11a>
 310:	83 37       	cpi	r24, 0x73	; 115
 312:	71 f0       	breq	.+28     	; 0x330 <vfprintf+0x12e>
 314:	83 35       	cpi	r24, 0x53	; 83
 316:	09 f0       	breq	.+2      	; 0x31a <vfprintf+0x118>
 318:	59 c0       	rjmp	.+178    	; 0x3cc <vfprintf+0x1ca>
 31a:	21 c0       	rjmp	.+66     	; 0x35e <vfprintf+0x15c>
 31c:	f8 01       	movw	r30, r16
 31e:	80 81       	ld	r24, Z
 320:	89 83       	std	Y+1, r24	; 0x01
 322:	0e 5f       	subi	r16, 0xFE	; 254
 324:	1f 4f       	sbci	r17, 0xFF	; 255
 326:	88 24       	eor	r8, r8
 328:	83 94       	inc	r8
 32a:	91 2c       	mov	r9, r1
 32c:	53 01       	movw	r10, r6
 32e:	13 c0       	rjmp	.+38     	; 0x356 <vfprintf+0x154>
 330:	28 01       	movw	r4, r16
 332:	f2 e0       	ldi	r31, 0x02	; 2
 334:	4f 0e       	add	r4, r31
 336:	51 1c       	adc	r5, r1
 338:	f8 01       	movw	r30, r16
 33a:	a0 80       	ld	r10, Z
 33c:	b1 80       	ldd	r11, Z+1	; 0x01
 33e:	36 fe       	sbrs	r3, 6
 340:	03 c0       	rjmp	.+6      	; 0x348 <vfprintf+0x146>
 342:	69 2d       	mov	r22, r9
 344:	70 e0       	ldi	r23, 0x00	; 0
 346:	02 c0       	rjmp	.+4      	; 0x34c <vfprintf+0x14a>
 348:	6f ef       	ldi	r22, 0xFF	; 255
 34a:	7f ef       	ldi	r23, 0xFF	; 255
 34c:	c5 01       	movw	r24, r10
 34e:	0e 94 ed 02 	call	0x5da	; 0x5da <strnlen>
 352:	4c 01       	movw	r8, r24
 354:	82 01       	movw	r16, r4
 356:	f3 2d       	mov	r31, r3
 358:	ff 77       	andi	r31, 0x7F	; 127
 35a:	3f 2e       	mov	r3, r31
 35c:	16 c0       	rjmp	.+44     	; 0x38a <vfprintf+0x188>
 35e:	28 01       	movw	r4, r16
 360:	22 e0       	ldi	r18, 0x02	; 2
 362:	42 0e       	add	r4, r18
 364:	51 1c       	adc	r5, r1
 366:	f8 01       	movw	r30, r16
 368:	a0 80       	ld	r10, Z
 36a:	b1 80       	ldd	r11, Z+1	; 0x01
 36c:	36 fe       	sbrs	r3, 6
 36e:	03 c0       	rjmp	.+6      	; 0x376 <vfprintf+0x174>
 370:	69 2d       	mov	r22, r9
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <vfprintf+0x178>
 376:	6f ef       	ldi	r22, 0xFF	; 255
 378:	7f ef       	ldi	r23, 0xFF	; 255
 37a:	c5 01       	movw	r24, r10
 37c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <strnlen_P>
 380:	4c 01       	movw	r8, r24
 382:	f3 2d       	mov	r31, r3
 384:	f0 68       	ori	r31, 0x80	; 128
 386:	3f 2e       	mov	r3, r31
 388:	82 01       	movw	r16, r4
 38a:	33 fc       	sbrc	r3, 3
 38c:	1b c0       	rjmp	.+54     	; 0x3c4 <vfprintf+0x1c2>
 38e:	82 2d       	mov	r24, r2
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	88 16       	cp	r8, r24
 394:	99 06       	cpc	r9, r25
 396:	b0 f4       	brcc	.+44     	; 0x3c4 <vfprintf+0x1c2>
 398:	b6 01       	movw	r22, r12
 39a:	80 e2       	ldi	r24, 0x20	; 32
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <fputc>
 3a2:	2a 94       	dec	r2
 3a4:	f4 cf       	rjmp	.-24     	; 0x38e <vfprintf+0x18c>
 3a6:	f5 01       	movw	r30, r10
 3a8:	37 fc       	sbrc	r3, 7
 3aa:	85 91       	lpm	r24, Z+
 3ac:	37 fe       	sbrs	r3, 7
 3ae:	81 91       	ld	r24, Z+
 3b0:	5f 01       	movw	r10, r30
 3b2:	b6 01       	movw	r22, r12
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <fputc>
 3ba:	21 10       	cpse	r2, r1
 3bc:	2a 94       	dec	r2
 3be:	21 e0       	ldi	r18, 0x01	; 1
 3c0:	82 1a       	sub	r8, r18
 3c2:	91 08       	sbc	r9, r1
 3c4:	81 14       	cp	r8, r1
 3c6:	91 04       	cpc	r9, r1
 3c8:	71 f7       	brne	.-36     	; 0x3a6 <vfprintf+0x1a4>
 3ca:	e8 c0       	rjmp	.+464    	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 3cc:	84 36       	cpi	r24, 0x64	; 100
 3ce:	11 f0       	breq	.+4      	; 0x3d4 <vfprintf+0x1d2>
 3d0:	89 36       	cpi	r24, 0x69	; 105
 3d2:	41 f5       	brne	.+80     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3d4:	f8 01       	movw	r30, r16
 3d6:	37 fe       	sbrs	r3, 7
 3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <vfprintf+0x1e6>
 3da:	60 81       	ld	r22, Z
 3dc:	71 81       	ldd	r23, Z+1	; 0x01
 3de:	82 81       	ldd	r24, Z+2	; 0x02
 3e0:	93 81       	ldd	r25, Z+3	; 0x03
 3e2:	0c 5f       	subi	r16, 0xFC	; 252
 3e4:	1f 4f       	sbci	r17, 0xFF	; 255
 3e6:	08 c0       	rjmp	.+16     	; 0x3f8 <vfprintf+0x1f6>
 3e8:	60 81       	ld	r22, Z
 3ea:	71 81       	ldd	r23, Z+1	; 0x01
 3ec:	07 2e       	mov	r0, r23
 3ee:	00 0c       	add	r0, r0
 3f0:	88 0b       	sbc	r24, r24
 3f2:	99 0b       	sbc	r25, r25
 3f4:	0e 5f       	subi	r16, 0xFE	; 254
 3f6:	1f 4f       	sbci	r17, 0xFF	; 255
 3f8:	f3 2d       	mov	r31, r3
 3fa:	ff 76       	andi	r31, 0x6F	; 111
 3fc:	3f 2e       	mov	r3, r31
 3fe:	97 ff       	sbrs	r25, 7
 400:	09 c0       	rjmp	.+18     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 402:	90 95       	com	r25
 404:	80 95       	com	r24
 406:	70 95       	com	r23
 408:	61 95       	neg	r22
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	8f 4f       	sbci	r24, 0xFF	; 255
 40e:	9f 4f       	sbci	r25, 0xFF	; 255
 410:	f0 68       	ori	r31, 0x80	; 128
 412:	3f 2e       	mov	r3, r31
 414:	2a e0       	ldi	r18, 0x0A	; 10
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	a3 01       	movw	r20, r6
 41a:	0e 94 34 03 	call	0x668	; 0x668 <__ultoa_invert>
 41e:	88 2e       	mov	r8, r24
 420:	86 18       	sub	r8, r6
 422:	45 c0       	rjmp	.+138    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 424:	85 37       	cpi	r24, 0x75	; 117
 426:	31 f4       	brne	.+12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 428:	23 2d       	mov	r18, r3
 42a:	2f 7e       	andi	r18, 0xEF	; 239
 42c:	b2 2e       	mov	r11, r18
 42e:	2a e0       	ldi	r18, 0x0A	; 10
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	25 c0       	rjmp	.+74     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 434:	93 2d       	mov	r25, r3
 436:	99 7f       	andi	r25, 0xF9	; 249
 438:	b9 2e       	mov	r11, r25
 43a:	8f 36       	cpi	r24, 0x6F	; 111
 43c:	c1 f0       	breq	.+48     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 43e:	18 f4       	brcc	.+6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 440:	88 35       	cpi	r24, 0x58	; 88
 442:	79 f0       	breq	.+30     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 444:	b5 c0       	rjmp	.+362    	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 446:	80 37       	cpi	r24, 0x70	; 112
 448:	19 f0       	breq	.+6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44a:	88 37       	cpi	r24, 0x78	; 120
 44c:	21 f0       	breq	.+8      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 44e:	b0 c0       	rjmp	.+352    	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 450:	e9 2f       	mov	r30, r25
 452:	e0 61       	ori	r30, 0x10	; 16
 454:	be 2e       	mov	r11, r30
 456:	b4 fe       	sbrs	r11, 4
 458:	0d c0       	rjmp	.+26     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 45a:	fb 2d       	mov	r31, r11
 45c:	f4 60       	ori	r31, 0x04	; 4
 45e:	bf 2e       	mov	r11, r31
 460:	09 c0       	rjmp	.+18     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 462:	34 fe       	sbrs	r3, 4
 464:	0a c0       	rjmp	.+20     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 466:	29 2f       	mov	r18, r25
 468:	26 60       	ori	r18, 0x06	; 6
 46a:	b2 2e       	mov	r11, r18
 46c:	06 c0       	rjmp	.+12     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 46e:	28 e0       	ldi	r18, 0x08	; 8
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	05 c0       	rjmp	.+10     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 474:	20 e1       	ldi	r18, 0x10	; 16
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47a:	20 e1       	ldi	r18, 0x10	; 16
 47c:	32 e0       	ldi	r19, 0x02	; 2
 47e:	f8 01       	movw	r30, r16
 480:	b7 fe       	sbrs	r11, 7
 482:	07 c0       	rjmp	.+14     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 484:	60 81       	ld	r22, Z
 486:	71 81       	ldd	r23, Z+1	; 0x01
 488:	82 81       	ldd	r24, Z+2	; 0x02
 48a:	93 81       	ldd	r25, Z+3	; 0x03
 48c:	0c 5f       	subi	r16, 0xFC	; 252
 48e:	1f 4f       	sbci	r17, 0xFF	; 255
 490:	06 c0       	rjmp	.+12     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 492:	60 81       	ld	r22, Z
 494:	71 81       	ldd	r23, Z+1	; 0x01
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 5f       	subi	r16, 0xFE	; 254
 49c:	1f 4f       	sbci	r17, 0xFF	; 255
 49e:	a3 01       	movw	r20, r6
 4a0:	0e 94 34 03 	call	0x668	; 0x668 <__ultoa_invert>
 4a4:	88 2e       	mov	r8, r24
 4a6:	86 18       	sub	r8, r6
 4a8:	fb 2d       	mov	r31, r11
 4aa:	ff 77       	andi	r31, 0x7F	; 127
 4ac:	3f 2e       	mov	r3, r31
 4ae:	36 fe       	sbrs	r3, 6
 4b0:	0d c0       	rjmp	.+26     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4b2:	23 2d       	mov	r18, r3
 4b4:	2e 7f       	andi	r18, 0xFE	; 254
 4b6:	a2 2e       	mov	r10, r18
 4b8:	89 14       	cp	r8, r9
 4ba:	58 f4       	brcc	.+22     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4bc:	34 fe       	sbrs	r3, 4
 4be:	0b c0       	rjmp	.+22     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4c0:	32 fc       	sbrc	r3, 2
 4c2:	09 c0       	rjmp	.+18     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4c4:	83 2d       	mov	r24, r3
 4c6:	8e 7e       	andi	r24, 0xEE	; 238
 4c8:	a8 2e       	mov	r10, r24
 4ca:	05 c0       	rjmp	.+10     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4cc:	b8 2c       	mov	r11, r8
 4ce:	a3 2c       	mov	r10, r3
 4d0:	03 c0       	rjmp	.+6      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4d2:	b8 2c       	mov	r11, r8
 4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4d6:	b9 2c       	mov	r11, r9
 4d8:	a4 fe       	sbrs	r10, 4
 4da:	0f c0       	rjmp	.+30     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4dc:	fe 01       	movw	r30, r28
 4de:	e8 0d       	add	r30, r8
 4e0:	f1 1d       	adc	r31, r1
 4e2:	80 81       	ld	r24, Z
 4e4:	80 33       	cpi	r24, 0x30	; 48
 4e6:	21 f4       	brne	.+8      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4e8:	9a 2d       	mov	r25, r10
 4ea:	99 7e       	andi	r25, 0xE9	; 233
 4ec:	a9 2e       	mov	r10, r25
 4ee:	09 c0       	rjmp	.+18     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4f0:	a2 fe       	sbrs	r10, 2
 4f2:	06 c0       	rjmp	.+12     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 4f4:	b3 94       	inc	r11
 4f6:	b3 94       	inc	r11
 4f8:	04 c0       	rjmp	.+8      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4fa:	8a 2d       	mov	r24, r10
 4fc:	86 78       	andi	r24, 0x86	; 134
 4fe:	09 f0       	breq	.+2      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 500:	b3 94       	inc	r11
 502:	a3 fc       	sbrc	r10, 3
 504:	11 c0       	rjmp	.+34     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 506:	a0 fe       	sbrs	r10, 0
 508:	06 c0       	rjmp	.+12     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 50a:	b2 14       	cp	r11, r2
 50c:	88 f4       	brcc	.+34     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
 50e:	28 0c       	add	r2, r8
 510:	92 2c       	mov	r9, r2
 512:	9b 18       	sub	r9, r11
 514:	0e c0       	rjmp	.+28     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 516:	b2 14       	cp	r11, r2
 518:	60 f4       	brcc	.+24     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 51a:	b6 01       	movw	r22, r12
 51c:	80 e2       	ldi	r24, 0x20	; 32
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <fputc>
 524:	b3 94       	inc	r11
 526:	f7 cf       	rjmp	.-18     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 528:	b2 14       	cp	r11, r2
 52a:	18 f4       	brcc	.+6      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 52c:	2b 18       	sub	r2, r11
 52e:	02 c0       	rjmp	.+4      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 530:	98 2c       	mov	r9, r8
 532:	21 2c       	mov	r2, r1
 534:	a4 fe       	sbrs	r10, 4
 536:	10 c0       	rjmp	.+32     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 538:	b6 01       	movw	r22, r12
 53a:	80 e3       	ldi	r24, 0x30	; 48
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <fputc>
 542:	a2 fe       	sbrs	r10, 2
 544:	17 c0       	rjmp	.+46     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 546:	a1 fc       	sbrc	r10, 1
 548:	03 c0       	rjmp	.+6      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 54a:	88 e7       	ldi	r24, 0x78	; 120
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
 550:	88 e5       	ldi	r24, 0x58	; 88
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	b6 01       	movw	r22, r12
 556:	0c c0       	rjmp	.+24     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 558:	8a 2d       	mov	r24, r10
 55a:	86 78       	andi	r24, 0x86	; 134
 55c:	59 f0       	breq	.+22     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 55e:	a1 fe       	sbrs	r10, 1
 560:	02 c0       	rjmp	.+4      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 562:	8b e2       	ldi	r24, 0x2B	; 43
 564:	01 c0       	rjmp	.+2      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 566:	80 e2       	ldi	r24, 0x20	; 32
 568:	a7 fc       	sbrc	r10, 7
 56a:	8d e2       	ldi	r24, 0x2D	; 45
 56c:	b6 01       	movw	r22, r12
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <fputc>
 574:	89 14       	cp	r8, r9
 576:	38 f4       	brcc	.+14     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 578:	b6 01       	movw	r22, r12
 57a:	80 e3       	ldi	r24, 0x30	; 48
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <fputc>
 582:	9a 94       	dec	r9
 584:	f7 cf       	rjmp	.-18     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 586:	8a 94       	dec	r8
 588:	f3 01       	movw	r30, r6
 58a:	e8 0d       	add	r30, r8
 58c:	f1 1d       	adc	r31, r1
 58e:	80 81       	ld	r24, Z
 590:	b6 01       	movw	r22, r12
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <fputc>
 598:	81 10       	cpse	r8, r1
 59a:	f5 cf       	rjmp	.-22     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
 59c:	22 20       	and	r2, r2
 59e:	09 f4       	brne	.+2      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 5a0:	42 ce       	rjmp	.-892    	; 0x226 <vfprintf+0x24>
 5a2:	b6 01       	movw	r22, r12
 5a4:	80 e2       	ldi	r24, 0x20	; 32
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <fputc>
 5ac:	2a 94       	dec	r2
 5ae:	f6 cf       	rjmp	.-20     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 5b0:	f6 01       	movw	r30, r12
 5b2:	86 81       	ldd	r24, Z+6	; 0x06
 5b4:	97 81       	ldd	r25, Z+7	; 0x07
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 5b8:	8f ef       	ldi	r24, 0xFF	; 255
 5ba:	9f ef       	ldi	r25, 0xFF	; 255
 5bc:	2b 96       	adiw	r28, 0x0b	; 11
 5be:	e2 e1       	ldi	r30, 0x12	; 18
 5c0:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__epilogue_restores__>

000005c4 <strnlen_P>:
 5c4:	fc 01       	movw	r30, r24
 5c6:	05 90       	lpm	r0, Z+
 5c8:	61 50       	subi	r22, 0x01	; 1
 5ca:	70 40       	sbci	r23, 0x00	; 0
 5cc:	01 10       	cpse	r0, r1
 5ce:	d8 f7       	brcc	.-10     	; 0x5c6 <strnlen_P+0x2>
 5d0:	80 95       	com	r24
 5d2:	90 95       	com	r25
 5d4:	8e 0f       	add	r24, r30
 5d6:	9f 1f       	adc	r25, r31
 5d8:	08 95       	ret

000005da <strnlen>:
 5da:	fc 01       	movw	r30, r24
 5dc:	61 50       	subi	r22, 0x01	; 1
 5de:	70 40       	sbci	r23, 0x00	; 0
 5e0:	01 90       	ld	r0, Z+
 5e2:	01 10       	cpse	r0, r1
 5e4:	d8 f7       	brcc	.-10     	; 0x5dc <strnlen+0x2>
 5e6:	80 95       	com	r24
 5e8:	90 95       	com	r25
 5ea:	8e 0f       	add	r24, r30
 5ec:	9f 1f       	adc	r25, r31
 5ee:	08 95       	ret

000005f0 <fputc>:
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	fb 01       	movw	r30, r22
 5fa:	23 81       	ldd	r18, Z+3	; 0x03
 5fc:	21 fd       	sbrc	r18, 1
 5fe:	03 c0       	rjmp	.+6      	; 0x606 <fputc+0x16>
 600:	8f ef       	ldi	r24, 0xFF	; 255
 602:	9f ef       	ldi	r25, 0xFF	; 255
 604:	2c c0       	rjmp	.+88     	; 0x65e <fputc+0x6e>
 606:	22 ff       	sbrs	r18, 2
 608:	16 c0       	rjmp	.+44     	; 0x636 <fputc+0x46>
 60a:	46 81       	ldd	r20, Z+6	; 0x06
 60c:	57 81       	ldd	r21, Z+7	; 0x07
 60e:	24 81       	ldd	r18, Z+4	; 0x04
 610:	35 81       	ldd	r19, Z+5	; 0x05
 612:	42 17       	cp	r20, r18
 614:	53 07       	cpc	r21, r19
 616:	44 f4       	brge	.+16     	; 0x628 <fputc+0x38>
 618:	a0 81       	ld	r26, Z
 61a:	b1 81       	ldd	r27, Z+1	; 0x01
 61c:	9d 01       	movw	r18, r26
 61e:	2f 5f       	subi	r18, 0xFF	; 255
 620:	3f 4f       	sbci	r19, 0xFF	; 255
 622:	31 83       	std	Z+1, r19	; 0x01
 624:	20 83       	st	Z, r18
 626:	8c 93       	st	X, r24
 628:	26 81       	ldd	r18, Z+6	; 0x06
 62a:	37 81       	ldd	r19, Z+7	; 0x07
 62c:	2f 5f       	subi	r18, 0xFF	; 255
 62e:	3f 4f       	sbci	r19, 0xFF	; 255
 630:	37 83       	std	Z+7, r19	; 0x07
 632:	26 83       	std	Z+6, r18	; 0x06
 634:	14 c0       	rjmp	.+40     	; 0x65e <fputc+0x6e>
 636:	8b 01       	movw	r16, r22
 638:	ec 01       	movw	r28, r24
 63a:	fb 01       	movw	r30, r22
 63c:	00 84       	ldd	r0, Z+8	; 0x08
 63e:	f1 85       	ldd	r31, Z+9	; 0x09
 640:	e0 2d       	mov	r30, r0
 642:	09 95       	icall
 644:	89 2b       	or	r24, r25
 646:	e1 f6       	brne	.-72     	; 0x600 <fputc+0x10>
 648:	d8 01       	movw	r26, r16
 64a:	16 96       	adiw	r26, 0x06	; 6
 64c:	8d 91       	ld	r24, X+
 64e:	9c 91       	ld	r25, X
 650:	17 97       	sbiw	r26, 0x07	; 7
 652:	01 96       	adiw	r24, 0x01	; 1
 654:	17 96       	adiw	r26, 0x07	; 7
 656:	9c 93       	st	X, r25
 658:	8e 93       	st	-X, r24
 65a:	16 97       	sbiw	r26, 0x06	; 6
 65c:	ce 01       	movw	r24, r28
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	1f 91       	pop	r17
 664:	0f 91       	pop	r16
 666:	08 95       	ret

00000668 <__ultoa_invert>:
 668:	fa 01       	movw	r30, r20
 66a:	aa 27       	eor	r26, r26
 66c:	28 30       	cpi	r18, 0x08	; 8
 66e:	51 f1       	breq	.+84     	; 0x6c4 <__ultoa_invert+0x5c>
 670:	20 31       	cpi	r18, 0x10	; 16
 672:	81 f1       	breq	.+96     	; 0x6d4 <__ultoa_invert+0x6c>
 674:	e8 94       	clt
 676:	6f 93       	push	r22
 678:	6e 7f       	andi	r22, 0xFE	; 254
 67a:	6e 5f       	subi	r22, 0xFE	; 254
 67c:	7f 4f       	sbci	r23, 0xFF	; 255
 67e:	8f 4f       	sbci	r24, 0xFF	; 255
 680:	9f 4f       	sbci	r25, 0xFF	; 255
 682:	af 4f       	sbci	r26, 0xFF	; 255
 684:	b1 e0       	ldi	r27, 0x01	; 1
 686:	3e d0       	rcall	.+124    	; 0x704 <__ultoa_invert+0x9c>
 688:	b4 e0       	ldi	r27, 0x04	; 4
 68a:	3c d0       	rcall	.+120    	; 0x704 <__ultoa_invert+0x9c>
 68c:	67 0f       	add	r22, r23
 68e:	78 1f       	adc	r23, r24
 690:	89 1f       	adc	r24, r25
 692:	9a 1f       	adc	r25, r26
 694:	a1 1d       	adc	r26, r1
 696:	68 0f       	add	r22, r24
 698:	79 1f       	adc	r23, r25
 69a:	8a 1f       	adc	r24, r26
 69c:	91 1d       	adc	r25, r1
 69e:	a1 1d       	adc	r26, r1
 6a0:	6a 0f       	add	r22, r26
 6a2:	71 1d       	adc	r23, r1
 6a4:	81 1d       	adc	r24, r1
 6a6:	91 1d       	adc	r25, r1
 6a8:	a1 1d       	adc	r26, r1
 6aa:	20 d0       	rcall	.+64     	; 0x6ec <__ultoa_invert+0x84>
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <__ultoa_invert+0x48>
 6ae:	68 94       	set
 6b0:	3f 91       	pop	r19
 6b2:	2a e0       	ldi	r18, 0x0A	; 10
 6b4:	26 9f       	mul	r18, r22
 6b6:	11 24       	eor	r1, r1
 6b8:	30 19       	sub	r19, r0
 6ba:	30 5d       	subi	r19, 0xD0	; 208
 6bc:	31 93       	st	Z+, r19
 6be:	de f6       	brtc	.-74     	; 0x676 <__ultoa_invert+0xe>
 6c0:	cf 01       	movw	r24, r30
 6c2:	08 95       	ret
 6c4:	46 2f       	mov	r20, r22
 6c6:	47 70       	andi	r20, 0x07	; 7
 6c8:	40 5d       	subi	r20, 0xD0	; 208
 6ca:	41 93       	st	Z+, r20
 6cc:	b3 e0       	ldi	r27, 0x03	; 3
 6ce:	0f d0       	rcall	.+30     	; 0x6ee <__ultoa_invert+0x86>
 6d0:	c9 f7       	brne	.-14     	; 0x6c4 <__ultoa_invert+0x5c>
 6d2:	f6 cf       	rjmp	.-20     	; 0x6c0 <__ultoa_invert+0x58>
 6d4:	46 2f       	mov	r20, r22
 6d6:	4f 70       	andi	r20, 0x0F	; 15
 6d8:	40 5d       	subi	r20, 0xD0	; 208
 6da:	4a 33       	cpi	r20, 0x3A	; 58
 6dc:	18 f0       	brcs	.+6      	; 0x6e4 <__ultoa_invert+0x7c>
 6de:	49 5d       	subi	r20, 0xD9	; 217
 6e0:	31 fd       	sbrc	r19, 1
 6e2:	40 52       	subi	r20, 0x20	; 32
 6e4:	41 93       	st	Z+, r20
 6e6:	02 d0       	rcall	.+4      	; 0x6ec <__ultoa_invert+0x84>
 6e8:	a9 f7       	brne	.-22     	; 0x6d4 <__ultoa_invert+0x6c>
 6ea:	ea cf       	rjmp	.-44     	; 0x6c0 <__ultoa_invert+0x58>
 6ec:	b4 e0       	ldi	r27, 0x04	; 4
 6ee:	a6 95       	lsr	r26
 6f0:	97 95       	ror	r25
 6f2:	87 95       	ror	r24
 6f4:	77 95       	ror	r23
 6f6:	67 95       	ror	r22
 6f8:	ba 95       	dec	r27
 6fa:	c9 f7       	brne	.-14     	; 0x6ee <__ultoa_invert+0x86>
 6fc:	00 97       	sbiw	r24, 0x00	; 0
 6fe:	61 05       	cpc	r22, r1
 700:	71 05       	cpc	r23, r1
 702:	08 95       	ret
 704:	9b 01       	movw	r18, r22
 706:	ac 01       	movw	r20, r24
 708:	0a 2e       	mov	r0, r26
 70a:	06 94       	lsr	r0
 70c:	57 95       	ror	r21
 70e:	47 95       	ror	r20
 710:	37 95       	ror	r19
 712:	27 95       	ror	r18
 714:	ba 95       	dec	r27
 716:	c9 f7       	brne	.-14     	; 0x70a <__ultoa_invert+0xa2>
 718:	62 0f       	add	r22, r18
 71a:	73 1f       	adc	r23, r19
 71c:	84 1f       	adc	r24, r20
 71e:	95 1f       	adc	r25, r21
 720:	a0 1d       	adc	r26, r0
 722:	08 95       	ret

00000724 <__prologue_saves__>:
 724:	2f 92       	push	r2
 726:	3f 92       	push	r3
 728:	4f 92       	push	r4
 72a:	5f 92       	push	r5
 72c:	6f 92       	push	r6
 72e:	7f 92       	push	r7
 730:	8f 92       	push	r8
 732:	9f 92       	push	r9
 734:	af 92       	push	r10
 736:	bf 92       	push	r11
 738:	cf 92       	push	r12
 73a:	df 92       	push	r13
 73c:	ef 92       	push	r14
 73e:	ff 92       	push	r15
 740:	0f 93       	push	r16
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	cd b7       	in	r28, 0x3d	; 61
 74a:	de b7       	in	r29, 0x3e	; 62
 74c:	ca 1b       	sub	r28, r26
 74e:	db 0b       	sbc	r29, r27
 750:	0f b6       	in	r0, 0x3f	; 63
 752:	f8 94       	cli
 754:	de bf       	out	0x3e, r29	; 62
 756:	0f be       	out	0x3f, r0	; 63
 758:	cd bf       	out	0x3d, r28	; 61
 75a:	09 94       	ijmp

0000075c <__epilogue_restores__>:
 75c:	2a 88       	ldd	r2, Y+18	; 0x12
 75e:	39 88       	ldd	r3, Y+17	; 0x11
 760:	48 88       	ldd	r4, Y+16	; 0x10
 762:	5f 84       	ldd	r5, Y+15	; 0x0f
 764:	6e 84       	ldd	r6, Y+14	; 0x0e
 766:	7d 84       	ldd	r7, Y+13	; 0x0d
 768:	8c 84       	ldd	r8, Y+12	; 0x0c
 76a:	9b 84       	ldd	r9, Y+11	; 0x0b
 76c:	aa 84       	ldd	r10, Y+10	; 0x0a
 76e:	b9 84       	ldd	r11, Y+9	; 0x09
 770:	c8 84       	ldd	r12, Y+8	; 0x08
 772:	df 80       	ldd	r13, Y+7	; 0x07
 774:	ee 80       	ldd	r14, Y+6	; 0x06
 776:	fd 80       	ldd	r15, Y+5	; 0x05
 778:	0c 81       	ldd	r16, Y+4	; 0x04
 77a:	1b 81       	ldd	r17, Y+3	; 0x03
 77c:	aa 81       	ldd	r26, Y+2	; 0x02
 77e:	b9 81       	ldd	r27, Y+1	; 0x01
 780:	ce 0f       	add	r28, r30
 782:	d1 1d       	adc	r29, r1
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	f8 94       	cli
 788:	de bf       	out	0x3e, r29	; 62
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	cd bf       	out	0x3d, r28	; 61
 78e:	ed 01       	movw	r28, r26
 790:	08 95       	ret

00000792 <_exit>:
 792:	f8 94       	cli

00000794 <__stop_program>:
 794:	ff cf       	rjmp	.-2      	; 0x794 <__stop_program>
